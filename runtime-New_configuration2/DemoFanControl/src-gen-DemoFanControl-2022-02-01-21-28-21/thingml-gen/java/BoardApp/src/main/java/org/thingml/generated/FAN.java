/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : FAN
 **/
public class FAN extends Component implements IFAN_inFAN {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tPIN12 = " + FAN_PIN12_var;
result += "";
return result;
}

public synchronized void FanON_via_inFAN(){
final Event _msg = FanONType.instantiate();
_msg.setPort(inFAN_port);
receive(_msg);
}

public synchronized void FanOFF_via_inFAN(){
final Event _msg = FanOFFType.instantiate();
_msg.setPort(inFAN_port);
receive(_msg);
}

//Attributes
private short FAN_PIN12_var;
//Ports
private Port inFAN_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final Ms25_ticMessageType ms25_ticType = new Ms25_ticMessageType();
protected final Ms500_ticMessageType ms500_ticType = new Ms500_ticMessageType();
protected final FanONMessageType FanONType = new FanONMessageType();
protected final FanOFFMessageType FanOFFType = new FanOFFMessageType();
//Empty Constructor
public FAN() {
super();
}

//Getters and Setters for non readonly/final attributes
public short getFAN_PIN12_var() {
return FAN_PIN12_var;
}

public void setFAN_PIN12_var(short FAN_PIN12_var) {
this.FAN_PIN12_var = FAN_PIN12_var;
}

public FAN initFAN_PIN12_var(short FAN_PIN12_var) {
this.FAN_PIN12_var = FAN_PIN12_var;
return this;
}

//Getters for Ports
public Port getInFAN_port() {
return inFAN_port;
}
private CompositeState buildFAN_FAN_SM(){
final AtomicState state_FAN_FAN_SM_StandBY = new AtomicState("StandBY");
state_FAN_FAN_SM_StandBY.onEntry(()->{
pinMode(getFAN_PIN12_var(), OUTPUT);
});
Handler h1693014960 = new Handler();
h1693014960.from(state_FAN_FAN_SM_StandBY);
h1693014960.event(FanONType);
h1693014960.port(inFAN_port);
h1693014960.action((Event e)->{
digitalWrite(getFAN_PIN12_var(),HIGH);
});

Handler h758053226 = new Handler();
h758053226.from(state_FAN_FAN_SM_StandBY);
h758053226.event(FanOFFType);
h758053226.port(inFAN_port);
h758053226.action((Event e)->{
digitalWrite(getFAN_PIN12_var(), LOW);
});

final CompositeState state_FAN_FAN_SM = new CompositeState("FAN_SM");
state_FAN_FAN_SM.onEntry(()->{
});
state_FAN_FAN_SM.add(state_FAN_FAN_SM_StandBY);
state_FAN_FAN_SM.initial(state_FAN_FAN_SM_StandBY);
return state_FAN_FAN_SM;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
inFAN_port = new Port("inFAN", this);
} else {
inFAN_port = ((FAN)root).inFAN_port;
}
if (session == null){
//Init state machine
behavior = buildFAN_FAN_SM();
}
return this;
}

}
