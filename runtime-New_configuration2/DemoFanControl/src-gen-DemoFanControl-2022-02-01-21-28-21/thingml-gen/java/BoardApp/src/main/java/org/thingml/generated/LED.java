/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : LED
 **/
public class LED extends Component implements ILED_inLED {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tPIN11 = " + LED_PIN11_var;
result += "";
return result;
}

public synchronized void LedON_via_inLED(){
final Event _msg = LedONType.instantiate();
_msg.setPort(inLED_port);
receive(_msg);
}

public synchronized void LedOFF_via_inLED(){
final Event _msg = LedOFFType.instantiate();
_msg.setPort(inLED_port);
receive(_msg);
}

//Attributes
private short LED_PIN11_var;
//Ports
private Port inLED_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final Ms25_ticMessageType ms25_ticType = new Ms25_ticMessageType();
protected final Ms500_ticMessageType ms500_ticType = new Ms500_ticMessageType();
protected final LedOFFMessageType LedOFFType = new LedOFFMessageType();
protected final LedONMessageType LedONType = new LedONMessageType();
//Empty Constructor
public LED() {
super();
}

//Getters and Setters for non readonly/final attributes
public short getLED_PIN11_var() {
return LED_PIN11_var;
}

public void setLED_PIN11_var(short LED_PIN11_var) {
this.LED_PIN11_var = LED_PIN11_var;
}

public LED initLED_PIN11_var(short LED_PIN11_var) {
this.LED_PIN11_var = LED_PIN11_var;
return this;
}

//Getters for Ports
public Port getInLED_port() {
return inLED_port;
}
private CompositeState buildLED_LED_SM(){
final AtomicState state_LED_LED_SM_Ready = new AtomicState("Ready");
state_LED_LED_SM_Ready.onEntry(()->{
pinMode(getLED_PIN11_var(), OUTPUT);
});
Handler h1769465501 = new Handler();
h1769465501.from(state_LED_LED_SM_Ready);
h1769465501.event(LedONType);
h1769465501.port(inLED_port);
h1769465501.action((Event e)->{
digitalWrite(getLED_PIN11_var(),HIGH);
});

Handler h647859173 = new Handler();
h647859173.from(state_LED_LED_SM_Ready);
h647859173.event(LedOFFType);
h647859173.port(inLED_port);
h647859173.action((Event e)->{
digitalWrite(getLED_PIN11_var(), LOW);
});

final CompositeState state_LED_LED_SM = new CompositeState("LED_SM");
state_LED_LED_SM.onEntry(()->{
});
state_LED_LED_SM.add(state_LED_LED_SM_Ready);
state_LED_LED_SM.initial(state_LED_LED_SM_Ready);
return state_LED_LED_SM;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
inLED_port = new Port("inLED", this);
} else {
inLED_port = ((LED)root).inLED_port;
}
if (session == null){
//Init state machine
behavior = buildLED_LED_SM();
}
return this;
}

}
