/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Board
 **/
public class Board extends Component implements IBoard_fromButton {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void press_via_fromButton(){
final Event _msg = pressType.instantiate();
_msg.setPort(fromButton_port);
receive(_msg);
}

public synchronized void release_via_fromButton(){
final Event _msg = releaseType.instantiate();
_msg.setPort(fromButton_port);
receive(_msg);
}

private void sendLedON_via_toLED(){
toLED_port.send(LedONType.instantiate());
}

private void sendLedOFF_via_toLED(){
toLED_port.send(LedOFFType.instantiate());
}

private void sendFanON_via_toFAN(){
toFAN_port.send(FanONType.instantiate());
}

private void sendFanOFF_via_toFAN(){
toFAN_port.send(FanOFFType.instantiate());
}

//Attributes
//Ports
private Port toLED_port;
private Port toFAN_port;
private Port fromButton_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final Ms25_ticMessageType ms25_ticType = new Ms25_ticMessageType();
protected final Ms500_ticMessageType ms500_ticType = new Ms500_ticMessageType();
protected final FanONMessageType FanONType = new FanONMessageType();
protected final FanOFFMessageType FanOFFType = new FanOFFMessageType();
protected final ReleaseMessageType releaseType = new ReleaseMessageType();
protected final PressMessageType pressType = new PressMessageType();
protected final LedOFFMessageType LedOFFType = new LedOFFMessageType();
protected final LedONMessageType LedONType = new LedONMessageType();
//Empty Constructor
public Board() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getToLED_port() {
return toLED_port;
}
public Port getToFAN_port() {
return toFAN_port;
}
public Port getFromButton_port() {
return fromButton_port;
}
private CompositeState buildBoard_BOARD_SM(){
final AtomicState state_Board_BOARD_SM_IDLE = new AtomicState("IDLE");
state_Board_BOARD_SM_IDLE.onEntry(()->{
sendLedON_via_toLED();
sendFanOFF_via_toFAN();
});
final AtomicState state_Board_BOARD_SM_FanOFFLedON = new AtomicState("FanOFFLedON");
state_Board_BOARD_SM_FanOFFLedON.onEntry(()->{
sendLedON_via_toLED();
sendFanOFF_via_toFAN();
});
final AtomicState state_Board_BOARD_SM_FanOnLedOFF = new AtomicState("FanOnLedOFF");
state_Board_BOARD_SM_FanOnLedOFF.onEntry(()->{
sendLedOFF_via_toLED();
sendFanON_via_toFAN();
});
Transition h1764517598 = new Transition();
h1764517598.from(state_Board_BOARD_SM_IDLE).to(state_Board_BOARD_SM_FanOFFLedON);
Transition h1201919520 = new Transition();
h1201919520.from(state_Board_BOARD_SM_FanOFFLedON).to(state_Board_BOARD_SM_FanOnLedOFF);
h1201919520.event(pressType);
h1201919520.port(fromButton_port);
Transition h1790761524 = new Transition();
h1790761524.from(state_Board_BOARD_SM_FanOnLedOFF).to(state_Board_BOARD_SM_FanOFFLedON);
h1790761524.event(releaseType);
h1790761524.port(fromButton_port);
final CompositeState state_Board_BOARD_SM = new CompositeState("BOARD_SM");
state_Board_BOARD_SM.onEntry(()->{
});
state_Board_BOARD_SM.add(state_Board_BOARD_SM_IDLE);
state_Board_BOARD_SM.add(state_Board_BOARD_SM_FanOFFLedON);
state_Board_BOARD_SM.add(state_Board_BOARD_SM_FanOnLedOFF);
state_Board_BOARD_SM.initial(state_Board_BOARD_SM_IDLE);
return state_Board_BOARD_SM;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
toLED_port = new Port("toLED", this);
toFAN_port = new Port("toFAN", this);
fromButton_port = new Port("fromButton", this);
} else {
toLED_port = ((Board)root).toLED_port;
toFAN_port = ((Board)root).toFAN_port;
fromButton_port = ((Board)root).fromButton_port;
}
if (session == null){
//Init state machine
behavior = buildBoard_BOARD_SM();
}
return this;
}

}
